# NaiveSocks configration file example
#
# Using TOML: 
#   https://github.com/toml-lang/toml
#
# How NaiveSocks works:
#   [client] (==> ...) ==> [InAdapter] ==> [OutAdapter] ==> (... ==>) [destination]
#


##### BEGIN of local configration example #####

# this is an InAdapter:
[in.socks5listener]
#   ^^^^^^^^^^^^^^ InAdapter name

type = 'socks'
# Available InAdapter types: direct, socks, http, naive, ss

local = '127.1:1080' # "127.1" -> "127.0.0.1", "127.257" -> "127.0.1.1"
# socks5 listening address

out = 'examplenaivec'
# Name of OutAdapter to connect. default: 'default'

# [out.rt]
# type = 'router'
# default = 'direct'
# [[out.rt.rules]]
# abp = '!abp filter string'
# abpfile = 'abp_filter_file_path'
# base64 = false # if abp/abpfile content is base64 encoded
# eq = 'google.com'
# wildcard = '*.google.*'
# regex = '^(www|play)\.google\.com$'
# port = 80
## if any one above is match
# new_host = 'new_dest_host_here' # support regex group: $0, $1, $2...
# new_dest = 'new_dest:port_here' # same here
# to = 'adapter_name_or_inline_table_here'
## every field (even 'to') are optionals
# [[out.rt.rules]]
## next rule here...


# this is an OutAdapter:
[out.examplenaive]
#    ^^^^^^^^^^^^ OutAdapter name
type = 'naive'
# naive: Naive Multiplexing protocol over Websocket
# Available OutAdapter types: direct, socks, http, ss, naive, router

server = 'example.com:80'
# Remote NaiveSocks server

key = 'this is the key'
# encryption key (default: 'hello, world')

## (Optionals & defaults):
# path = '/'
# connect_on_start = false
# pool_min_free = 2
# pool_concurrency = 32
# connect_delay = 1
# connect_delay_multiplier = 2
# connect_delay_max = 36
# fastopen = true
# xum = 1

##### END of local configration example #####


##### BEGIN of server configration example #####

[in.naive_listener]
type = 'naive'
local = '0:80' # "0" -> "0.0.0.0"
key = 'this is the key'
out = 'direct'
## (Optionals & defaults):
# path = '/'

## no need to declare these default adapters...
# [out.direct]
# type = 'direct'
# force_dest = '...unless you need this...'
# [out.fail]
# type = 'fail'
# reason = '...or this.'

##### END of server configration example #####



# [in.whatever]
# type = 'ss'
# local = '0:1079'
# key = 'this is the key'
# encryption = 'aes-128-ctr' # which is the only encryption currently supported
# out = 'examplenaivec'

# [in.direct]
# type = 'direct'
# local = '0:1078'
# dest = 'example.com:80'
# out = { type = 'direct', name = 'direct_inline' }
## you can use inline table to declare adapters, name is optional.

# [out.direct]
# type = 'direct'
## (Optionals):
# force_dest = 'example.com:80'

[out.socks5out]
type = 'socks5'
server = '127.1:1080'
## (Optionals):
# username = 'abc'
# password = '123'
